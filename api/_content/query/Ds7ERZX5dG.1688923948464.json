{"_path":"/tools","_dir":"","_draft":false,"_partial":false,"_locale":"","body":[{"slug":"cairis","name":"Cairis","description":"<h2>Kurzbeschreibung</h2>\n\n<p>Cairis steht für &ldquo;Computer Aided Integration of Requirements and Information Security&rdquo; und bietet eine Plattform für die Erarbeitung, Spezifikation und Validierung sicherer und benutzbarer Systeme.</p>\n\n<h2>Workflow und Usability</h2>\n\n<p>Cairis ist ein webbasiertes Programm, welches sich durch eine einfache und intuitive Oberflächengestaltung aus- zeichnet. Cairis hebt sich von anderen Threat Modeling Tools durch die Einführung von &ldquo;Environments&rdquo; (Umge- bungen) ab. Eine Umgebung kann ein System darstellen, das zu einer bestimmten Tageszeit oder an einem bestimm- ten physischen Ort arbeitet. Umgebungen umfassen sowohl sichtbare Phänomene wie Assets, Aufgaben, Personas und Angreifer als auch unsichtbare Phänomene wie Ziele, Schwachstellen und Bedrohungen.</p>\n\n<p>Workflow und Usability sind sehr intuitiv. Wie bei den meisten Tools erstellt man eine Liste von Assets, Require- ments, Personas und weiteren, um so die Projektarchitektur zu umrei&szlig;en. Mit ein paar Klicks kann man verschiedene Modeltypen auswählen und bekommt entsprechende Diagramme direkt in der Anwendung. Jederzeit ist man auch in der Lage einen Bericht zu generieren.</p>\n\n<h2>Integration in den Softwareentwicklungsprozess</h2>\n\n<p>Durch einfache und intuitive Bedienung sowie eine ausführliche Dokumentation ist Cairis eine gute und beliebte Wahl als Threat Modeling Tool. Cairis wurde und wird kommerziell genutzt. Cairis ist darauf ausgelegt von Gruppen bzw. Teams genutzt zu werden.</p>\n\n<p>Cairis behauptet von sich selbst nicht &ldquo;the one tool to rule them all&rdquo; zu sein. Vielmehr sollte Cairis in Kombination mit anderen Tools genutzt werden. Daher sollte dieses Tool vor allem als Ergänzung gesehen werden. Ebenfalls wird eine API angeboten, welche es ermöglicht, Applikationen zu erstellen, die mit Daten von Cairis arbeiten.</p>\n\n<h2>Fazit</h2>\n\n<p>Cairis ist ein einfach zu lernendes und trotzdem sehr umfangreiches Threat Modeling Tool welches als Ergänzung zu anderen Tools und Vorgehensweisen gesehen werden kann. Cairis ist quelloffen und schon seit über 10 Jahren in Benutzung.</p>\n\n<p>Webseite: <a href=\"https://cairis.org/\">https://cairis.org/</a><br />\nGitHub: <a href=\"https://github.com/cairis-platform/cairis\">https://github.com/cairis-platform/cairis</a></p>\n","pros_cons":{"advantages":[],"disadvantages":[]},"rating":{"agile-methoden":1,"tool-integration":1,"arbeitsteiligkeit":-1,"datenhaltung":-1,"kosten":1,"konfigurierbar":-1,"einstiegshürde":1,"multi-plattform":[1,2,3],"templates":[]}},{"slug":"mtmt","name":"Microsoft Threat Modeling Tool","description":"<h2>Kurzbeschreibung</h2>\n\n<p>Das Microsoft Threat Modeling Tool ist eine Anwendung, die Organisationen dabei unterstützt, Bedrohungen für ihre Software- und Informationssysteme zu identifizieren, bewerten und bewältigen. Es bietet eine Benutzeroberfläche, um Systemdiagramme zu erstellen, Bedrohungen auszuwählen und Sicherheitskontrollen zu planen. Das Tool integriert sich mit anderen Sicherheitswerkzeugen und ermöglicht den Austausch von Informationen, um die Gesamtsicherheit zu verbessern. Das Tool ermöglicht es den Benutzern, Bedrohungen auf der Grundlage von vor- definierten Bedrohungsprofilen aus einer umfangreichen Datenbank auszuwählen oder eigene Bedrohungen anzupassen. Es bewertet automatisch die Auswirkungen und Wahrscheinlichkeiten dieser Bedrohungen und hilft den Benutzern dabei, geeignete Gegenma&szlig;nahmen und Sicherheitskontrollen zu planen.</p>\n\n<p><strong>Webseite:</strong>www.microsoft.com/en-us/securityengineering/sdl/threatmodeling</p>\n\n<p><strong>Dokumentation: </strong>www.learn.microsoft.com/de-de/azure/security/develop/threat-modeling-tool</p>\n\n<h2>Allgemeines</h2>\n\n<ul>\n\t<li>\n\t<p>kurz: MTMT</p>\n\t</li>\n\t<li>\n\t<p>verwendet für die Analyse die Methode STRIDE (Spoofing, Tampering, Info Disclosure, Denial of Service, Elevation of Privilege)</p>\n\t</li>\n\t<li>\n\t<p>aus den vom Tool durchgeführten Analysen können Berichte generiert werden</p>\n\t</li>\n</ul>\n","pros_cons":{"advantages":["kostenlos","geringe Einstiegshürde, da Bedienung (Modellierung von Threats) über einen grafischen Editor","Templates (sog. Stencils) für gängige Threats verfügbar","Templates können erstellt und projektübergreifend verwendet werden","generierte Dateien (tm7-Format) via Skript mit OWASP-Threat-Dragon kompatibel (siehe www.threatdragon.github.io/utils)"],"disadvantages":["ausschließlich für das Betriebssystem Windows erhältlich","proprietäres Datenformat (tm7, tb7)"]},"rating":{"agile-methoden":-1,"tool-integration":-1,"arbeitsteiligkeit":-1,"datenhaltung":-1,"kosten":1,"konfigurierbar":-1,"einstiegshürde":1,"multi-plattform":[3],"templates":[1]}},{"slug":"owasp-thread-dragon","name":"OWASP Threat Dragon","description":"<h2>Kurzbeschreibung</h2>\n\n<p>OWASP Threat Dragon ist ein grafisches und quelloffenens Threat-Modeling-Tool, das es erlaubt die drei verschiedenen Methodiken STRIDE, LIDDUN und CIA in Software-Entwicklungsprozessen zu nutzen.</p>\n\n<p>Workflow und Usability</p>\n\n<p>Das Projekt zielt auf eine leichte Erlernbarkeit und breite Verwendbarkeit. Dementsprechend ist schon die Bedienoberfläche minimal gehalten. Der Workflow ist linear und gliedert sich in die folgenden immer gleichen Schritte:</p>\n\n<ul>\n\t<li>Auswahl eines Threat-Model-Typs (STRIDE, LIDDUN, CIA und Generic)</li>\n\t<li>Grafische Modellierung von Systemkomponenten, deren Datenflüssen und Trust Boundaries</li>\n\t<li>Modelltyp-bezogenes Definierungen von Threats und Mitigations</li>\n\t<li>Abrufen des Reports</li>\n</ul>\n\n<p>Abgesehen vom grafischen Diagramm-Editor beschränkt sich die Programmlogik von Threat Dragon auf die Grundelemente des Threat Modelings. Unterstützt wird insbesondere die Verwaltung und das Reporting der verschiedenen Threat-Typen, die die zur Auswahl stehenden Modellierungsmethoden den hinzugefügten Systemkomponenten zuordnen. Threat Dragon stellt also sicher, dass pro hinzugefügter Systemkomponente alle vorgesehen Threat-Typen abgefragt werden, noch nicht mit einer Ma&szlig;nahme verknüpfte (Control, Prevention, Mitigation) Threats in einer Warnfarbe angezeigt werden und dass vollständige Reports generiert werden.</p>\n\n<h2>Integration in den Softwareentwicklungsprozess</h2>\n\n<p>Die Philosophie der leichten Erlernbarkeit und breiten Verwendbarkeit zieht sich auch durch das grundsätzliche Programm-Design. Die Schnittstelle von Threat Dragon zu verschiedenen agilen oder nicht-agilen Vorgehensmodellen, organisatorischen Rahmenbedingungen wie Compliance-Verpflichtungen, gro&szlig;en oder kleinen Teams oder weiteren Tools, die im Softwareentwicklungsprozess angewandt werden, ist stets die bedienende Person. Der individuellen Flexibilität steht daher ein geringer Unterstützungsgrad in den folgenden Feldern gegenüber:</p>\n\n<ul>\n\t<li>\n\t<p>Keine Integration mit agilen Vorgehensmodellen, deren Kommunikationsformen und Artefakttypen (z. B. keine Verwaltung von Meetings, Sprints, User Storys)</p>\n\t</li>\n\t<li>\n\t<p>Keine Verwaltung von Rollen und Arbeitsteiligkeit auf Organisationsebene, keine Integration mit agilen Skalierungs-Frameworks</p>\n\t</li>\n\t<li>\n\t<p>Keine Integration mit Tools und Prozessen auf Ebene von Compliance-Verpflichtungen (ISMS, Normen etc.)</p>\n\t</li>\n\t<li>\n\t<p>Keine Integration mit Architektur- und Modellierungstools oder sonstigen Tools zur Komponentenverwaltung im Entwicklungsprozess (z. B. kein Import von Asset-Listen aus Dependency- Management-Tools)</p>\n\t</li>\n\t<li>\n\t<p>Ausbaufähige Integration mit CI/CD-Tools (nur Datenhaltung in github, bisher wenig konfigurierbar)</p>\n\t</li>\n</ul>\n\n<h2>Fazit</h2>\n\n<p>OWASP Threat Dragon zielt auf eine geringe Einsatzschwelle durch leichte Erlernbarkeit. Erreicht werden soll dies durch den Fokus auf Usability und einen minimalistischen Funktionsumfang, die Beschränkung auf die Kernprozesse von Threat-Modeling sowie die geringe Integration in umgebende Prozesse und Systeme.</p>\n\n<p>Dieser Ansatz wird in kleineren Organisationen und Teams, die ihre Tools und Prozesse frei wählen können, oft zum Erfolg führen. Die nur minimale Führung beim Hinzufügen von Komponenten und der Auswahl von Threats und Gegenma&szlig;nahmen erfordert allerdings auch hier die individuelle Methodensicherheit beim Threat-Modelling und einen guten Projekt-Überblick, was in einem gewissen Widerspruch zum recht rigiden Workflow steht.</p>\n\n<p>In gro&szlig;en Organisationen mit stärker festgelegten und strukturierten Entwicklungsprojekten mit hoher Arbeitsteiligkeit wird sich die bewusst geringe Integration mit den umgebenden Prozessen und der dementsprechend geringe Unterstützungsgrad auf Ebene der o.g. Herausforderungen vermutlich öfter nachteilig auswirken.</p>\n","pros_cons":{"advantages":["kostenlos, permissives Lizenzmodell","leichte Erlernbarkeit","Cross-Plattform-Verfügbarkeit","hohe Flexibilität bzgl. der organisatorischen und methodischen Integration (Unterstützung verschiedener Threat Modeling Methoden, kollaborative Nutzung möglich)","hohe Flexibilität bei der Toolchain- und Workflow-Integration"],"disadvantages":["stark vorgegebner Workflow","wenig Konfigurationsmöglichkeiten","wenig Hilfestellung beim Modellierungsprozess","geringe Unterstützung bei arbeitsorganisatorischen Aspekten (keine Abbildung von Prozessen auf der Ebene von Vorgehensmodellen, Teamorganisation, Compliance, etc.)","geringe technische Automatisierungs- und Integrationsfähigkeit innerhalb der Entwicklung-Toolchain"]},"rating":{"agile-methoden":-1,"tool-integration":-1,"arbeitsteiligkeit":-1,"datenhaltung":-1,"kosten":-1,"konfigurierbar":-1,"einstiegshürde":1,"multi-plattform":[1,2,3],"templates":[1,2,3,4]}},{"slug":"pytm","name":"pytm","description":"<h2>Kurzbeschreibung</h2>\n\n<p>pytm ist ein auf Python basierendes Threat Modeling Tool, welches 2020 entwickelt wurde und Threat Modeling automatisierter und von Entwicklern nutzbar zu machen. Hierbei wird von Entwicklern eine Beschreibung des zu analysierenden Systems bereitgestellt. Auf dieser Basis erstellt pytm, je nach Bedarf, Datenflussdiagramme, Sequenz-Diagramme und gibt Informationen zu potenziellen Threats aus.</p>\n\n<p><strong>Webseite:</strong><a href=\"http://www.github.com/izar/pytm\">www.github.com/izar/pytm</a></p>\n","pros_cons":{"advantages":["kostenlos","automatische Generierung von Datenflussdiagrammen, Sequenz-Diagrammen und Threat-Analysen","Einbindung in automatisierte build-/release-Pipelines möglich","Text-basiertes Modellieren von Systemarchitektur, d.h. Einbindung in Source Code Management Systeme und somit Revisionierbarkeit","Beschreibung individueller Threats möglich"],"disadvantages":["nicht für das Betriebssystem Windows erhältlich","Beschreibung von Threats erfolgt in der Programmiersprache Python (kann Hürde darstellen, wenn Python nicht in Technologie-Stack enthalten oder gewünscht)"]},"rating":{"agile-methoden":-1,"tool-integration":1,"arbeitsteiligkeit":1,"datenhaltung":1,"kosten":1,"konfigurierbar":-1,"einstiegshürde":-1,"multi-plattform":[1,2],"templates":[]}},{"slug":"threagile","name":"Threagile","description":"<h2>Kurzbeschreibung</h2>\n\n<p>threagile ist ein Command-Line basiertes Threat Modeling Tool. Die Architektur der Anwendung wird in YAML- Files modelliert. Dabei können &ldquo;Data-Assets&rdquo;, &ldquo;Technical Assets&rdquo;, &ldquo;Communication-Links&rdquo; und &ldquo;Trust Boundaries&rdquo; definiert werden. Es ist leicht automatisierbar und daher sehr gut für agile Softwareentwicklungsprozesse geeignet. Da die Softwarearchitektur in YAML-Files definiert wird, lässt es sich auch gut in Version Control Systeme wie git einpflegen.</p>\n\n<h2><strong>Workflow und Usability </strong></h2>\n\n<p>Die Ergebnisse der Analyse werden in verschiedenen Formaten ausgegeben (PDF, JSON, Datenfluss-Diagramme als Bilder, Excel..) Ich sehe darin den Vorteil, dass noch eigene Tools zur weiteren Auswertung entwickelt werden können, die z.B. mit den JSON-Files von threagile gefüttert werden können. Auf der anderen Seite kann man auch technisch weniger geschulten Menschen (z.B. Projektmanager) das sehr umfangreiche PDF zu lesen geben, das von threagile generiert wird.</p>\n\n<p>threagile hat bereits eine Vielzahl von Risiken implementiert (z.B. cross-site-scripting). Man kann aber auch eigene Risiken definieren, die für den jeweiligen Anwendungsfall nötig sind.</p>\n\n<p>Der letzte Commit auf Github ist von November 2021. Es scheint also leider so, als ob threagile aktuell nicht weiterentwickelt wird.</p>\n\n<p><strong>Beispiel: </strong> <a><span>https://github.com/Threagile/threagile/blob/master/demo/example/threagile.yaml</span></a></p>\n","pros_cons":{"advantages":["kostenlos","erleichterte Einbindung in build-/release-Pipelines, da Kommandozeilen basiert","Text-basiertes Modellieren von Systemarchitektur, d.h. Einbindung in Source Code Management Systeme und somit Revisionierbarkeit","Beschreibung eigener Threats möglich","verschiedene Dateiformate bzgl. der Output-Dateien erleichtern die Weiterverarbeitung von Analyseergebnissen","Open Source (MIT Lizenz)"],"disadvantages":["aktuell keine Weiterentwicklung der Anwendung"]},"rating":{"agile-methoden":-1,"tool-integration":1,"arbeitsteiligkeit":1,"datenhaltung":1,"kosten":1,"konfigurierbar":1,"einstiegshürde":-1,"multi-plattform":[1,2,3],"templates":[]}}],"_id":"content:tools.json","_type":"json","title":"Tools","_source":"content","_file":"tools.json","_extension":"json"}